name: Prebuild

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]

jobs:
  prebuild:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18, 20, 22]
        architecture: [x64]
        include:
          # Add arm64 for macOS (Apple Silicon)
          - os: macos-latest
            node-version: 18
            architecture: arm64
          - os: macos-latest
            node-version: 20
            architecture: arm64
          - os: macos-latest
            node-version: 22
            architecture: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        architecture: ${{ matrix.architecture }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libgd-dev
        # Install optional dependencies for full feature set
        sudo apt-get install -y libheif-dev libavif-dev libtiff-dev libwebp-dev \
          libfontconfig1-dev libfreetype6-dev libpng-dev libjpeg-dev \
          libaom-dev libdav1d-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config gd
        # Install optional dependencies for full feature set
        brew install libheif libavif libtiff libwebp fontconfig freetype
    
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build and test
      run: |
        npm run rebuild
        npm test
    
    - name: Generate prebuilds
      run: |
        npx prebuildify --napi --strip
    
    - name: Upload prebuilds
      uses: actions/upload-artifact@v3
      with:
        name: prebuilds-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.architecture }}
        path: prebuilds/
        retention-days: 30
    
    - name: Verify prebuild works
      run: |
        # Test that the prebuild can be loaded
        node -e "
          const gd = require('./');
          console.log('Version:', gd.getGDVersion());
          console.log('Prebuild loaded successfully');
        "

  # Job to collect all prebuilds and prepare for release
  collect-prebuilds:
    needs: prebuild
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all prebuilds
      uses: actions/download-artifact@v3
      with:
        path: all-prebuilds
    
    - name: Reorganize prebuilds
      run: |
        mkdir -p prebuilds
        # Copy all prebuilds to the prebuilds directory
        find all-prebuilds -name "*.node" -exec cp {} prebuilds/ \;
        ls -la prebuilds/
    
    - name: Create release package
      run: |
        tar -czf prebuilds.tar.gz prebuilds/
    
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: prebuilds.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}